const { chromium } = require('playwright');
const fs = require('fs').promises;

async function checkFixedViewport(page, width) {
    await page.setViewportSize({ width, height: 1000 });
    await page.waitForTimeout(1000);
    
    const issues = await page.evaluate(() => {
        const problems = [];
        
        // „ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã‰∏ªË¶Å„Çª„ÇØ„Ç∑„Éß„É≥
        const sections = [
            { selector: '.comparison-section', name: 'ÊØîËºÉË°®„Çª„ÇØ„Ç∑„Éß„É≥' },
            { selector: '.clinic-details-section', name: 'Ë©≥Á¥∞„Çª„ÇØ„Ç∑„Éß„É≥' },
            { selector: '.tips-container', name: 'Tips„Çª„ÇØ„Ç∑„Éß„É≥' },
            { selector: '.ranking-container', name: '„É©„É≥„Ç≠„É≥„Ç∞„Ç≥„É≥„ÉÜ„Éä' }
        ];
        
        sections.forEach(section => {
            const element = document.querySelector(section.selector);
            if (element) {
                const rect = element.getBoundingClientRect();
                const styles = window.getComputedStyle(element);
                
                // ÂπÖ„ÅÆÂïèÈ°å„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                if (rect.width > window.innerWidth || element.scrollWidth > element.clientWidth) {
                    problems.push({
                        section: section.name,
                        width: rect.width,
                        scrollWidth: element.scrollWidth,
                        clientWidth: element.clientWidth,
                        viewportWidth: window.innerWidth,
                        overflow: styles.overflow,
                        overflowX: styles.overflowX
                    });
                }
            }
        });
        
        // Ê®™„Çπ„ÇØ„É≠„Éº„É´„ÅÆÊúâÁÑ°„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const hasBodyScroll = document.body.scrollWidth > document.body.clientWidth;
        const hasHtmlScroll = document.documentElement.scrollWidth > document.documentElement.clientWidth;
        
        return {
            problems,
            bodyScroll: hasBodyScroll,
            htmlScroll: hasHtmlScroll,
            bodyWidth: document.body.scrollWidth,
            viewportWidth: window.innerWidth
        };
    });
    
    // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆ„Çã
    await page.screenshot({ 
        path: `fixed-${width}px.png`, 
        fullPage: true 
    });
    
    return issues;
}

(async () => {
    const browser = await chromium.launch({ 
        headless: false,
        devtools: true
    });
    
    const context = await browser.newContext();
    const page = await context.newPage();
    
    console.log('üîß „É¨„Çπ„Éù„É≥„Ç∑„Éñ‰øÆÊ≠£Âæå„ÅÆ„ÉÜ„Çπ„Éà\n');
    
    await page.goto('http://localhost:8090/draft/', {
        waitUntil: 'networkidle'
    });
    
    // CSS„ÅåÈÅ©Áî®„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    const cssLoaded = await page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('link[rel="stylesheet"]'));
        return links.map(link => ({
            href: link.href,
            loaded: link.sheet !== null
        }));
    });
    
    console.log('üìã Ë™≠„ÅøËæº„Åæ„Çå„ÅüCSS:');
    cssLoaded.forEach(css => {
        console.log(`  ${css.loaded ? '‚úÖ' : '‚ùå'} ${css.href}`);
    });
    
    // „ÉÜ„Çπ„Éà„Åô„ÇãÁîªÈù¢ÂπÖ
    const viewports = [480, 550, 600, 650, 700, 768];
    const results = {};
    
    for (const width of viewports) {
        console.log(`\nüì± ${width}px „Åß„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ...`);
        const result = await checkFixedViewport(page, width);
        results[width] = result;
        
        if (result.problems.length === 0) {
            console.log('  ‚úÖ ÂïèÈ°å„Å™„Åó');
        } else {
            console.log('  ‚ö†Ô∏è  ÊÆã„Å£„Å¶„ÅÑ„ÇãÂïèÈ°å:');
            result.problems.forEach(problem => {
                console.log(`    - ${problem.section}: ÂπÖ ${problem.width}px („Éì„É•„Éº„Éù„Éº„Éà: ${problem.viewportWidth}px)`);
            });
        }
        
        if (result.bodyScroll || result.htmlScroll) {
            console.log(`  ‚ö†Ô∏è  Ê®™„Çπ„ÇØ„É≠„Éº„É´: Body=${result.bodyScroll}, HTML=${result.htmlScroll}`);
        }
    }
    
    // ‰øÆÊ≠£„ÅÆÂäπÊûú„ÇíÁ¢∫Ë™ç
    console.log('\nüìä ‰øÆÊ≠£ÂäπÊûú„ÅÆÁ¢∫Ë™ç:');
    console.log('‰øÆÊ≠£Ââç„ÅÆÂïèÈ°å:');
    console.log('  - ÊØîËºÉË°®„Çª„ÇØ„Ç∑„Éß„É≥: ÂπÖ 118828px');
    console.log('  - Ë©≥Á¥∞„Çª„ÇØ„Ç∑„Éß„É≥: ÂêåÊßò„ÅÆÂπÖÂïèÈ°å');
    console.log('  - Tips„Çª„ÇØ„Ç∑„Éß„É≥: 748pxÔºà„Éì„É•„Éº„Éù„Éº„ÉàË∂ÖÈÅéÔºâ');
    
    console.log('\n‰øÆÊ≠£Âæå„ÅÆÁä∂ÊÖã:');
    const allFixed = Object.values(results).every(r => r.problems.length === 0);
    if (allFixed) {
        console.log('  ‚úÖ „Åô„Åπ„Å¶„ÅÆÂπÖÂïèÈ°å„ÅåËß£Ê±∫„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
    } else {
        console.log('  ‚ö†Ô∏è  „Åæ„Å†ÂïèÈ°å„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇËøΩÂä†„ÅÆ‰øÆÊ≠£„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ');
    }
    
    // ÁâπÂÆö„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    const detailCheck = await page.evaluate(() => {
        const checks = {};
        
        // ÊØîËºÉË°®
        const compTable = document.querySelector('.comparison-table');
        if (compTable) {
            checks.comparison = {
                width: compTable.offsetWidth,
                scrollWidth: compTable.scrollWidth,
                parentWidth: compTable.parentElement?.offsetWidth
            };
        }
        
        // Tips
        const tips = document.querySelector('.tips-container');
        if (tips) {
            checks.tips = {
                width: tips.offsetWidth,
                computedWidth: window.getComputedStyle(tips).width,
                maxWidth: window.getComputedStyle(tips).maxWidth
            };
        }
        
        return checks;
    });
    
    console.log('\nüîç „Çª„ÇØ„Ç∑„Éß„É≥Âà•Ë©≥Á¥∞:');
    console.log(JSON.stringify(detailCheck, null, 2));
    
    await browser.close();
})();